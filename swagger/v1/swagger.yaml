openapi: 3.0.3
info:
  title: Room200 API Documentation
  version: 1.0.0
  description: Documentation for the Room200 API

servers:
  - url: http://localhost:3000
    description: Local Development Server

paths:
  /api/v1/owners/sign_in:
    post:
      summary: Owner Login
      description: Endpoint for owner login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: owner@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        format: email
                        example: owner@example.com
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
                  
  /api/v1/owners/sign_up:
    post:
      summary: Owner Registration
      description: Endpoint for owner registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: newowner@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        format: email
                        example: newowner@example.com
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    description: Validation errors
                  
  /api/v1/owners/passwords/reset:
    post:
      summary: Request Password Reset
      description: Endpoint for requesting a password reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: owner@example.com
      responses:
        '200':
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset instructions sent
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Owner not found

  /api/v1/categories:
    get:
      summary: List Categories
      description: Endpoint to list all categories.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create a Category
      description: Endpoint to create a new category.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category Name
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /api/v1/families:
    get:
      summary: List Families
      description: Endpoint to list all families.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Family'

    post:
      summary: Create a Family
      description: Endpoint to create a new family.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Family Name
      responses:
        '201':
          description: Family created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  /api/v1/periods:
    get:
      summary: List Periods
      description: Endpoint to list all periods.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Period'
    post:
        summary: Create a Period
        description: Endpoint to create a new period.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Period Name
        responses:
          '201':
            description: Period created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Period'

  /api/v1/places:
    get:
      summary: List Places
      description: Endpoint to list all places.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'

    post:
      summary: Create a Place
      description: Endpoint to create a new place.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Place Name
      responses:
        '201':
          description: Place created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'

  /api/v1/products:
    get:
      summary: List Products
      description: Endpoint to list all products.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create a Product
      description: Endpoint to create a new product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'  # Use a separate input schema
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string  # Assuming image is a URL or file path
        location:
          type: string
        description:
          type: string
        price:
          type: number  # Use "number" for decimal fields
        active:
          type: boolean
        capacity:
          type: integer
        steering:
          type: string
        owner_id:
          type: integer
        category_id:
          type: integer
        family_id:
          type: integer
        place_id:
          type: integer
        period_id:
          type: integer

    ProductInput:  # Separate schema for input validation
      type: object
      properties:
        name:
          type: string
          example: Product Name
        image:
          type: string
          example: /path/to/image.jpg
        location:
          type: string
          example: Location
        description:
          type: string
          example: Product Description
        price:
          type: number
          format: double
          example: 10.99
        active:
          type: boolean
          example: true
        capacity:
          type: integer
          example: 100
        steering:
          type: string
          example: Steering Type
        owner_id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 2
        family_id:
          type: integer
          example: 3
        place_id:
          type: integer
          example: 4
        period_id:
          type: integer
          example: 5
      required:
        - name
        - price
        - active
        - capacity
        - owner_id
        - category_id
        - family_id
        - place_id
        - period_id

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name

    Place:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name

    Period:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name

    Family:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    

security:
  - bearerAuth: []
